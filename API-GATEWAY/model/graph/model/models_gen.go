// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Cart struct {
	ID          string      `json:"id"`
	UserID      string      `json:"userId"`
	TotalPrice  int         `json:"totalPrice"`
	CartItems   []*CartItem `json:"cartItems"`
	CreatedAt   int         `json:"createdAt"`
	UpdatedAt   int         `json:"updatedAt"`
	DiscardedAt int         `json:"discardedAt"`
}

type CartItem struct {
	ID          string `json:"id"`
	ProductID   string `json:"productId"`
	Quantity    int    `json:"quantity"`
	Price       int    `json:"price"`
	Note        string `json:"note"`
	CreatedAt   int    `json:"createdAt"`
	UpdatedAt   int    `json:"updatedAt"`
	DiscardedAt int    `json:"discardedAt"`
}

type Device struct {
	ID          string `json:"id"`
	DeviceID    string `json:"deviceId"`
	AccessToken string `json:"accessToken"`
	CreatedAt   int    `json:"createdAt"`
	UpdatedAt   int    `json:"updatedAt"`
	DiscardedAt int    `json:"discardedAt"`
}

type User struct {
	ID          string    `json:"id"`
	Username    string    `json:"username"`
	Email       string    `json:"email"`
	Password    string    `json:"password"`
	Devices     []*Device `json:"devices"`
	CreatedAt   int       `json:"createdAt"`
	UpdatedAt   int       `json:"updatedAt"`
	DiscardedAt int       `json:"discardedAt"`
}

type CommandResponse struct {
	Message CommandResponseMessage `json:"message"`
}

type FindCartItems struct {
	ID        string `json:"id"`
	ProductID string `json:"productId"`
	Limit     int    `json:"limit"`
	Page      int    `json:"page"`
}

type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginResponse struct {
	UserID string `json:"userId"`
	Token  string `json:"token"`
}

type RegisterRequest struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CommandResponseMessage string

const (
	CommandResponseMessageSuccess CommandResponseMessage = "SUCCESS"
	CommandResponseMessageFailed  CommandResponseMessage = "FAILED"
)

var AllCommandResponseMessage = []CommandResponseMessage{
	CommandResponseMessageSuccess,
	CommandResponseMessageFailed,
}

func (e CommandResponseMessage) IsValid() bool {
	switch e {
	case CommandResponseMessageSuccess, CommandResponseMessageFailed:
		return true
	}
	return false
}

func (e CommandResponseMessage) String() string {
	return string(e)
}

func (e *CommandResponseMessage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommandResponseMessage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid commandResponseMessage", str)
	}
	return nil
}

func (e CommandResponseMessage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
